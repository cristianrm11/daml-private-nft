module Token where

import Payment

{-
Content creators (issuers) can create NFTs and offer them for purchase (Token and TokenOffer templates)
Owners can sell their NFTs and have to pay royalties (Receipt, Payable, and PaymentClaim templates)
Parties (issuers and owners) must be explicitly permitted to join the network (Issuer, IssuerRequest, Owner, and OwnerRequest templates)
-}

-- behavior
-- datamodel
-- rights/obligations

template Token
    with
        issuer: Party
        owner: Party -- person who gets to get a claim on the token
        description: Text
        userAdmin: Party -- make sure issuer and owner are legit
        issued: Time
        lastPrice: Decimal
        currency: Text
        royaltyRate: Decimal -- determines how much money should gets paid back to the issuer.
                             -- For example if it's 2% and the token was sold at $100 then the newOwner has to pay $100 to the owner and $2 to the issuer

    where
        signatory issuer, userAdmin, owner

    key (issuer, owner, description) : (Party, Party, Text)
    maintainer key._2

    controller owner can
        Offer: ContractId Offer
            with
                newOwner: Party
                price: Decimal
            do
                create TokenOffer with ..

template TokenOffer
    with
        issuer: Party
        owner: Party -- person who gets to get a claim on the token
        description: Text
        userAdmin: Party -- make sure issuer and owner are legit
        issued: Time
        newOwner: Party
        price: Decimal
        lastPrice: Decimal
        currency: Text
    where
        signatory issuer, userAdmin, owner

        choice AcceptToken: (ContractId Token, ContractId Payable, ContractId Payable)
            controller newOwner, userAdmin
            do
                fromtNewOwnerToOwner <- create Payable
                    with
                        from = newOwner
                        to = owner
                        amount = price
                        currency
                        reference = "Notional for `" <> description <> "`."

                royaltyPayment <- create Payable
                    with
                        from = newOwner
                        to = issuer
                        amount = price / royaltyRate
                        currency
                        reference = "Royalty for `" <> description <> "`."


                newToken = create Token
                    with
                        owner = newOwner
                        lastPrice = price
                        ..
                return (newToken, fromtNewOwnerToOwner, royaltyPayment)